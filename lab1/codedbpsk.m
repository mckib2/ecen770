%% Lab 1 - Coded BPSK Simulation
% Nicholas McKibben
% ECEn 770
% 2018-03-13

clear;
close all;

%% (1) Simulation
% Write a program that will simulate performance of the (7,4) Hamming code
% over a BSC channel with channel crossover probability p =
% Q(sqrt(2*Eb/N0)) and plot the probability of error as a function of Eb/N0
% in dB. On the same plot, plot the theoretical probability of error for
% uncoded BPSK transmission. Identify what the coding gain is for a
% probability of error Pb = 10e-5.

% Following Algorithm 1.4...
% (1) Fix Ec (typically Ec = 1). Compute R.
rng('default');
M = 2;
Ec = 1;
n = 7; k = 4;
Eb = (n/k)*Ec;
R = k/n;
crossprob = @(N00) Q(sqrt(2*Ec/N00));
gammas = linspace(2,10,10); % signal-to-noise ratio
sigma2 = zeros(1,numel(gammas));
N0 = sigma2;
Pe = sigma2;
N = 30; % get this many errors

% Hamming Stuffs
A = [ 1 1 1;
      1 1 0;
      1 0 1;
      0 1 1 ];
G = [ eye(k) A ];
H = [ A.' eye(n-k) ];
midx = 1:k;

% (2) for each signal-to-noise ratio gamma = Eb/N0
for ii = 1:numel(gammas)
    
    % (3) Compute N0 = Ec/(R*gamma) and sigma2 = N0/2
    N0(ii) = Ec/(R*gammas(ii));
    sigma2(ii) = N0(ii)/2;
    
    % (4) Compute the BSC crossover probability
    p = crossprob(N0(ii));
    
    % (5) do ... while
    nn = 0;
    nbits = 0;
    while nn < N
        % (6) Generate r as a vector of n random bits which are 1 with
        % probability p
        r = double(rand(1,n) < p);
        
        % (7) Increment the number of bits generated by k
        nbits = nbits + k;
        
        % (8) Compute the syndrome s = rH^T
        s = mod(r*H.',2);
        
        % (9) If s ~= 0, determine the error location based on the column
        % of H which is equal to s and complement that bit of r
        if ~isequal(s,zeros(size(s)))
            %fprintf('Found one!\n');
            
            H_cols = join(string(H.'),'',2);
            res = double(strcmp(H_cols,join(string(s),'')));
            col_num = find(res == 1);
            
            % complement corresponding bit of r
            r(col_num) = ~r(col_num);
            
            % (10) Count the number of decoded bits (out of k) in r which
            % match the all-zero message bits
            dec = r(midx);
            cnt = numel(dec(dec == 0));
            
            err = k - cnt;
            
            % (11) Accumulate the number of bits in error
            if err
                nn = nn + err;
                %fprintf('gamma = %d, nn = %d\n',ii,nn);
            end
        end
    end
    
    % (13) Compute the probability of error
    Pe(ii) = nn/nbits;
end

%% Theoretical Uncoded BPSK
gammast = [ gammas linspace(10,20,20) ];
N0t = Eb./(R*gammast);
Pe_theoretical = Q(sqrt(2*Eb./N0t));

%% Plots
x1 = 10*log10(Eb./N0);
x2 = 10*log10(Eb./N0t);
figure(1);
semilogy(x1,Pe,'k-','DisplayName','Simulated Decoded'); grid on; hold on;
semilogy(x2,Pe_theoretical,'k--','DisplayName','Theoretical Uncoded');
title('Probability of Error');
xlabel('E_b/N_0 (dB)');
ylabel('P_b');
legend(gca,'show');

%% Coding Gain
% SNR_sim = interp1(Pe,x1,10e-5,'spline');
% [ x,idx ] = unique(x2);
% SNR_the = interp1(Pe_theoretical(idx),x2(idx),10e-5,'spline');

fSNR_sim = fit(Pe',x1','poly2');
SNR_sim = fSNR_sim(10e-5);
fSNR_the = fit(Pe_theoretical',x2','poly2');
SNR_the = fSNR_the(10e-5);

coding_gain = abs(SNR_sim - SNR_the);
fprintf('The coding gain for Pb = 10^-5 is %f dB\n',coding_gain);