%% (2) Hamming Code Simulation
% Repeat this for a (15, 11) Hamming code.

clear;
close all;

% Following Algorithm 1.4...
% (1) Fix Ec (typically Ec = 1). Compute R.
rng('default');
M = 2;
Ec = 1;
n = 15; k = 11;
R = k/n;
crossprob = @(N00) Q(sqrt(2*Ec/N00));
gammas = linspace(1,10,20); % signal-to-noise ratio
sigma2 = zeros(1,numel(gammas));
N0 = sigma2;
Pe = sigma2;
N = 20; % get this many errors

% Parity Matrix - (3.4) in book
Par = [ 1 1 0 1 1 0 1 0 1 0 1;
	    1 0 1 1 0 1 1 0 0 1 1;
	    0 1 1 1 0 0 0 1 1 1 1;
	    0 0 0 0 1 1 1 1 1 1 1 ];
H = [ Par eye(n-k) ];

midx = 1:k;

% (2) for each signal-to-noise ratio gamma = Eb/N0
for ii = 1:numel(gammas)
    
    % (3) Compute N0 = Ec/(R*gamma) and sigma2 = N0/2
    N0(ii) = Ec/(R*gammas(ii));
    sigma2(ii) = N0(ii)/2;
    
    % (4) Compute the BSC crossover probability
    p = crossprob(N0(ii));
    
    % (5) do ... while
    nn = 0;
    nbits = 0;
    while nn < N
        % (6) Generate r as a vector of n random bits which are 1 with
        % probability p
        r = double(rand(1,n) < p);
        
        % (7) Increment the number of bits generated by k
        nbits = nbits + k;
        
        % (8) Compute the syndrome s = rH^T
        s = mod(r*H',2);
        
        % (9) If s ~= 0, determine the error location based on the column
        % of H which is equal to s and complement that bit of r
        if ~isequal(s,zeros(size(s)))
            %fprintf('Found one!\n');
            
            H_cols = join(string(H.'),'',2);
            res = double(strcmp(H_cols,join(string(s),'')));
            col_num = find(res == 1);
            
            % complement corresponding bit of r
            r(col_num) = ~r(col_num);
            
            % (10) Count the number of decoded bits (out of k) in r which
            % match the all-zero message bits
            dec = r(midx);
            cnt = numel(dec(dec == 0));
            
            err = k - cnt;
            % (11) Accumulate the number of bits in error
            if err
                nn = nn + err;
                fprintf('gamma = %d, nn = %d\n',ii,nn);
            end
        end
    end
    
    % (13) Compute the probability of error
    Pe(ii) = nn/nbits;
end

%% Theoretical Uncoded BPSK
Pe_theoretical = Q(sqrt(2*Ec./N0));

%% Plots
x = 10*log10(Ec./N0);
figure(1);
semilogy(x,Pe,'DisplayName','Simulated'); grid on; hold on;
semilogy(x,Pe_theoretical,'DisplayName','Theoretical');
title('Probability of Error');
xlabel('E_b/N_0 (dB)');
ylabel('P_b');